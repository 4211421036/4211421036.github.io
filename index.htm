<!DOCTYPE html>
<html lang="en">

<head>
    <title>Web Page Application Store Github</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="This is collation application created by GALIH RIDHO UTOMO ">
    <meta name="keywords" content="HTML, CSS, JavaScript, Web Development, SEO">
    <meta name="author" content="GALIH RIDHO UTOMO">
    <meta name="robots" content="index, follow">
    <meta property="og:title" content="Web Page">
    <meta property="og:description" content="This is collation application created by GALIH RIDHO UTOMO ">
    <meta property="og:image" content="http://4211421036.github.io/345677.png">
    <meta property="og:url" content="http://4211421036.github.io">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Web Page">
    <meta name="twitter:description" content="This is collation application created by GALIH RIDHO UTOMO ">
    <meta name="twitter:image" content="http://4211421036.github.io/345677.png">
    <link rel="canonical" href="http://4211421036.github.io">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="icon" href="https://4211421036.github.io/g4lihru/987654567.png" type="image/x-icon">
    <style>
        body {
            margin: 0;
            font-family: 'Roboto', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        /* Modern Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--scrollbar-track);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--scrollbar-thumb);
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--scrollbar-thumb-hover);
        }

        .sidebar {
            width: 80px;
            background-color: var(--sidebar-bg);
            height: 100vh;
            position: fixed;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 20px;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar-item {
            position: relative;
            margin: 20px 0;
            cursor: pointer;
        }

        .sidebar-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 4px;
            height: 0;
            background-color: var(--primary-color);
            transition: height 0.3s ease;
        }

        .sidebar-item.active::before {
            height: -webkit-fill-available;
            background: var(--nav-button-color);
        }

        .tooltip {
            position: absolute;
            left: 100%;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--primary-color);
            color: var(--tooltip-text);
            padding: 5px 10px;
            border-radius: 4px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
            z-index: 10;
        }

        .sidebar-item:hover .tooltip {
            opacity: 1;
            visibility: visible;
        }

        .sidebar i {
            font-size: 22px;
            margin: 20px 0;
            color: var(--icon-color);
            transition: all 0.3s ease;
            padding: 12px;
            border-radius: 12px;
        }

        .sidebar i:hover {
            color: var(--icon-hover-color);
            background-color: var(--icon-bg-hover);
            transform: translateY(-2px);
        }

        .content {
            margin-left: 80px;
            padding: 30px;
        }

        .carousel {
            display: flex;
            overflow: hidden;
            margin-bottom: 30px;
            position: relative;
            border-radius: 20px;
        }

        .carousel-track {
            display: flex;
            transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            gap: 15px;
            overflow-x: hidden;
        }

        .carousel-item {
            flex: 0 0 auto;
            position: relative;
            width: calc((100% - 45px) / 4);
            height: 400px;
            border-radius: 20px;
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .carousel-item:hover {
            transform: scale(1.02);
        }

        .carousel-item1 {
            width: 50% !important;
        }

        .carousel-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .carousel-item .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--liner-color);
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 30px;
            box-sizing: border-box;
        }

        .carousel-item .overlay h2 {
            font-size: 28px;
            margin-bottom: 15px;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

        .carousel-item .overlay p {
            font-size: 16px;
            margin-bottom: 20px;
            opacity: 0.9;
        }

        .carousel-item .overlay button {
            background-color: var(--primary-color);
            border: none;
            padding: 14px 28px;
            color: var(--button-text);
            cursor: pointer;
            border-radius: 12px;
            font-weight: 500;
            font-size: 15px;
            transition: all 0.3s ease;
        }

        .carousel-item .overlay button:hover {
            background-color: var(--button-hover);
            transform: translateY(-2px);
        }

        .carousel-nav {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
        }

        .carousel-nav button {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--nav-button-color);
            width: 40px;
            height: 40px;
            cursor: pointer;
            backdrop-filter: blur(8px);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .carousel-nav button:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .section-title {
            font-size: 26px;
            margin: 30px 0;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

        .card-container {
            display: flex;
            padding: 10px 0;
            gap: 15px;
            overflow-x: hidden;
        }

        .card {
            flex: 0 0 300px;
            background-color: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            text-align: left;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            border: 1px solid var(--card-border);
        }

        .card:hover {
            transform: translateY(-5px);
            background-color: var(--card-hover-bg);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            border-color: var(--card-hover-border);
        }

        .card img {
            width: 70px;
            height: 70px;
            border-radius: 15px;
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }

        .card:hover img {
            transform: scale(1.05);
        }

        .card p {
            margin: 8px 0;
            font-size: 14px;
            line-height: 1.5;
            color: var(--text-color-primary);
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .card .repo-name {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 10px;
        }

        .card .repo-description {
            -webkit-line-clamp: 2;
            line-clamp: 2;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .card .repo-language {
            display: inline-flex;
            align-items: center;
            font-size: 13px;
            color: var(--language-color);
            margin-top: 15px;
            background: var(--language-bg);
            padding: 5px 10px;
            border-radius: 20px;
        }

        .card .repo-link {
            display: inline-block;
            margin-top: 20px;
            color: var(--link-color);
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            padding: 8px 15px;
            background: var(--link-bg);
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .card .repo-link:hover {
            background: var(--link-hover-bg);
            transform: translateX(5px);
        }

        .repo-nav {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            display: flex;
            justify-content: space-between;
            padding: 0 10px;
            pointer-events: none;
        }

        .repo-nav button {
            pointer-events: auto;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--nav-button-color);
            width: 40px;
            height: 40px;
            cursor: pointer;
            border-radius: 50%;
            backdrop-filter: blur(8px);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .repo-nav button:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .linkc {
            color: var(--link-c) !important;
            text-decoration: none;
        }

        .linkp {
            color: var(--link-p) !important;
            text-decoration: none;
        }

        @media (max-width: 1024px) {
            .carousel-item {
                width: calc((100% - 30px) / 3);
            }
        }

        @media (max-width: 768px) {
            .carousel-item {
                width: calc((100% - 15px) / 2);
            }
        }

        /* Light Theme */
        .light-theme {
            --background-color: #ffffff;
            --text-color: #000000;
            --scrollbar-track: #f1f1f1;
            --scrollbar-thumb: #c1c1c1;
            --scrollbar-thumb-hover: #a1a1a1;
            --sidebar-bg: #f8f9fa;
            --primary-color: #ffffff;
            --liner-color: linear-gradient(to top, rgb(255 255 255 / 80%), rgba(0, 0, 0, 0.2));
            --tooltip-text: #ffffff;
            --icon-color: #6c757d;
            --icon-hover-color: #ffffff;
            --icon-bg-hover: #007bff;
            --button-text: #ffffff;
            --button-hover: #0056b3;
            --nav-button-color: #000000;
            --text-color-primary: #000000;
            --card-bg: #ffffff;
            --card-border: #e1e1e1;
            --card-hover-bg: #f8f9fa;
            --card-hover-border: #d1d1d1;
            --language-color: #28a745;
            --language-bg: rgba(40, 167, 69, 0.1);
            --link-color: #007bff;
            --link-bg: rgba(0, 123, 255, 0.1);
            --link-hover-bg: rgba(0, 123, 255, 0.2);
            --link-c: #2b3954;
            --link-p: #151515;
        }

        /* Dark Theme */
        .dark-theme {
            --background-color: #13151a;
            --text-color: #ffffff;
            --scrollbar-track: #1f2227;
            --scrollbar-thumb: #4a4f57;
            --scrollbar-thumb-hover: #5a6069;
            --sidebar-bg: #1f2227;
            --primary-color: #0f2b46;
            --tooltip-text: #ffffff;
            --icon-color: #8b95a5;
            --icon-hover-color: #ffffff;
            --icon-bg-hover: #2d3139;
            --button-text: #ffffff;
            --button-hover: #1e5bc6;
            --nav-button-color: #ffffff;
            --text-color-primary: #ffffff;
            --liner-color: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.2));
            ;
            --card-bg: #1f2227;
            --card-border: rgba(255, 255, 255, 0.1);
            --card-hover-bg: #262a31;
            --card-hover-border: rgba(255, 255, 255, 0.2);
            --language-color: #4cd964;
            --language-bg: rgba(76, 217, 100, 0.1);
            --link-color: #2d6cdf;
            --link-bg: rgba(45, 108, 223, 0.1);
            --link-hover-bg: rgba(45, 108, 223, 0.2);
            --link-c: #80adff;
            --link-p: #ffffff;
        }
    </style>
    <script>
        // Function to detect system theme and apply corresponding class
        function applyTheme() {
            const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)").matches;
            if (prefersDarkScheme) {
                document.body.classList.add("dark-theme");
                document.body.classList.remove("light-theme");
            } else {
                document.body.classList.add("light-theme");
                document.body.classList.remove("dark-theme");
            }
        }

        // Function to detect background color and adjust text color
        function adjustTextColor() {
            const bgColor = window.getComputedStyle(document.body).backgroundColor;
            const rgb = bgColor.match(/\d+/g);
            const brightness = Math.round(((parseInt(rgb[0]) * 299) +
                (parseInt(rgb[1]) * 587) +
                (parseInt(rgb[2]) * 114)) / 1000);
            if (brightness > 125) {
                document.body.style.color = "#000000";
            } else {
                document.body.style.color = "#ffffff";
            }
        }

        // Apply theme and adjust text color on load
        document.addEventListener("DOMContentLoaded", () => {
            applyTheme();
            adjustTextColor();
        });

        // Listen for changes in the system theme
        window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", applyTheme);
    </script>
</head>

<body>
    <div id="splash-screen"
        style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #13151a; display: flex; align-items: center; justify-content: center; z-index: 1000;">
        <img src="https://4211421036.github.io/g4lihru/987654567.png" alt="Logo"
            style="width: 150px; height: 150px; background: white; border-radius: 25px;">
    </div>
    <script>
        // Hide splash screen after 3 seconds
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.getElementById('splash-screen').style.display = 'none';
            }, 3000);
        });
    </script>
    <div class="sidebar">
        <div class="sidebar-item" data-link="home" title="Home">
            <i class="fas fa-home"></i>
            <div class="tooltip">Home</div>
        </div>
        <div class="sidebar-item" data-link="download" title="Download">
            <i class="fas fa-download"></i>
            <div class="tooltip">Download</div>
        </div>
        <div class="sidebar-item" data-link="book" title="Book">
            <i class="fas fa-book"></i>
            <div class="tooltip">Book</div>
        </div>
    </div>
    <script>
        // Function to activate the sidebar item
        function activateSidebarItem(link) {
            const items = document.querySelectorAll('.sidebar-item');
            items.forEach(item => {
                if (item.getAttribute('data-link') === link) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }

        // Activate the home item by default
        activateSidebarItem('home');

        // Add click event listeners to sidebar items
        document.querySelectorAll('.sidebar-item').forEach(item => {
            item.addEventListener('click', () => {
                activateSidebarItem(item.getAttribute('data-link'));
                window.location.href = `#${item.getAttribute('data-link')}`; // Update URL
            });
        });
    </script>
    <div class="content">
        <div class="carousel">
            <div class="carousel-track">
                <div class="carousel-item carousel-item1">
                    <img alt="Breaking Bad character sitting in a warehouse" height="400"
                        src="https://storage.googleapis.com/a1aa/image/4nEokJjhM5BSY-67rsqe5y5OEcmEm9NrBYSznVlLGYE.jpg"
                        width="800" style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" />
                    <div class="overlay" style="border-radius: 15px; backdrop-filter: blur(2px);">
                        <h2 style="text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">Weekend flash sale</h2>
                        <p style="text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">Save on Breaking Bad and Better Call Saul
                        </p>
                        <button
                            style="border-radius: 25px; padding: 12px 30px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">See
                            details</button>
                    </div>
                </div>
                <div class="carousel-item carousel-item2">
                    <img alt="Entertainment apps logos" height="400"
                        src="https://storage.googleapis.com/a1aa/image/PAt2D3Ex_73tkQj2pJVZsorEX-Q-vMScs0EC3h_s1i0.jpg"
                        width="800" style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" />
                    <div class="overlay" style="border-radius: 15px; backdrop-filter: blur(2px);">
                        <h2 style="text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">Best entertainment apps</h2>
                        <button
                            style="border-radius: 25px; padding: 12px 30px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">See
                            details</button>
                    </div>
                </div>
                <div class="carousel-item carousel-item3">
                    <img alt="Microsoft Solitaire Collection: Gravity Blocks" height="400"
                        src="https://storage.googleapis.com/a1aa/image/0gpp5Rhk776fbWIxFb8YfzVZ74sWv1QbUGBTG2S6fvU.jpg"
                        width="800" style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" />
                    <div class="overlay" style="border-radius: 15px; backdrop-filter: blur(2px);">
                        <h2>Microsoft Solitaire Collection: Gravity Blocks</h2>
                        <button>See details</button>
                    </div>
                </div>
            </div>
            <div class="carousel-nav">
                <button class="carousel-prev">&lt;</button>
                <button class="carousel-next">&gt;</button>
            </div>
        </div>
        <div class="section-title">Aplikasi yang di Buat</div>
        <div style="position: relative;">
            <div class="card-container" id="github-repos"></div>
            <div class="repo-nav">
                <button class="repo-prev">&lt;</button>
                <button class="repo-next">&gt;</button>
            </div>
        </div>

        <script>
            // Function to fetch GitHub repos
            async function fetchGitHubRepos() {
                try {
                    const response = await fetch('https://api.github.com/users/4211421036/repos');
                    const repos = await response.json();
                    const container = document.getElementById('github-repos');

                    repos.forEach(repo => {
                        const card = document.createElement('div');
                        card.className = 'card';

                        card.innerHTML = `
                <img alt="GitHub" height="200" 
                    src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" 
                    width="150"/>
                <p>${repo.name}</p>
                <p class="free">${repo.language || 'No language'}</p>
                <p style="font-size: 12px">${repo.description || ''}</p>
                <a class="linkc" href="${repo.html_url}" target="_blank" 
                style="color: #2d6cdf; text-decoration: none;">View Repository</a>
                `;

                        container.appendChild(card);
                    });
                } catch (error) {
                    console.error('Error fetching GitHub repos:', error);
                }
            }

            // Function to handle card navigation
            function handleCardNavigation(direction) {
                const container = document.getElementById('github-repos');
                const cards = Array.from(container.children);
                if (direction === 'next') {
                    container.appendChild(cards[0]);
                } else {
                    container.insertBefore(cards[cards.length - 1], cards[0]);
                }
            }

            // Event listeners for navigation buttons
            document.querySelector('.repo-next').addEventListener('click', () => handleCardNavigation('next'));
            document.querySelector('.repo-prev').addEventListener('click', () => handleCardNavigation('prev'));

            // Call the function when page loads
            fetchGitHubRepos();
        </script>
    </div>
    <script>
        const track = document.querySelector('.carousel-track');
        const items = Array.from(track.children);
        const nextButton = document.querySelector('.carousel-next');
        const prevButton = document.querySelector('.carousel-prev');
        let currentIndex = 0;

        // Function to update carousel position
        function updateCarousel() {
            const itemWidth = items[currentIndex].getBoundingClientRect().width;
            track.style.transform = `translateX(-${currentIndex * itemWidth}px)`;
        }

        // Function to fetch GitHub repositories
        async function fetchGitHubRepos(username) {
            const response = await fetch(`https://api.github.com/users/4211421036/repos`);
            if (!response.ok) throw new Error('Failed to fetch GitHub repositories');
            return response.json();
        }

        // Function to fetch repository image
        async function fetchRepoImage(repo) {
            const response = await fetch(`https://api.github.com/repos/${repo.full_name}/contents`);
            if (!response.ok) throw new Error('Failed to fetch repository contents');
            const contents = await response.json();
            const imageFile = contents.find(file => file.type === 'file' && /\.(jpg|jpeg|png|gif)$/i.test(file.name));
            return imageFile ? imageFile.download_url : 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';
        }

        // Function to update carousel content with GitHub data
        async function updateCarouselContent() {
            try {
                const repos = await fetchGitHubRepos('4211421036'); // Replace with your GitHub username
                for (let i = 0; i < items.length; i++) {
                    if (i >= repos.length) break;
                    const repo = repos[i];
                    const imageUrl = await fetchRepoImage(repo);

                    items[i].setAttribute('data-name', repo.name);
                    items[i].setAttribute('data-description', repo.description || 'No description available');
                    items[i].setAttribute('data-url', repo.html_url);
                    items[i].setAttribute('data-image', imageUrl);

                    items[i].innerHTML = `
                        <img src="${imageUrl}" alt="${repo.name}">
                        <div class="overlay">
                            <h2>${repo.name}</h2>
                            <p>${repo.description || 'No description available'}</p>
                            <button style="border-radius: 25px; padding: 12px 30px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                                <a class="linkp" href="${repo.html_url}" target="_blank">View Repository</a>
                            </button>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error fetching GitHub data:', error);
            }
        }

        // Function to swap content (circular shift)
        function swapContent(direction) {
            if (direction === 'next') {
                const firstItem = {
                    name: items[0].getAttribute('data-name'),
                    description: items[0].getAttribute('data-description'),
                    url: items[0].getAttribute('data-url'),
                    image: items[0].getAttribute('data-image')
                };
                for (let i = 0; i < items.length - 1; i++) {
                    items[i].setAttribute('data-name', items[i + 1].getAttribute('data-name'));
                    items[i].setAttribute('data-description', items[i + 1].getAttribute('data-description'));
                    items[i].setAttribute('data-url', items[i + 1].getAttribute('data-url'));
                    items[i].setAttribute('data-image', items[i + 1].getAttribute('data-image'));
                    items[i].innerHTML = items[i + 1].innerHTML;
                }
                items[items.length - 1].setAttribute('data-name', firstItem.name);
                items[items.length - 1].setAttribute('data-description', firstItem.description);
                items[items.length - 1].setAttribute('data-url', firstItem.url);
                items[items.length - 1].setAttribute('data-image', firstItem.image);
                items[items.length - 1].innerHTML = `
                    <img src="${firstItem.image}" alt="${firstItem.name}">
                    <div class="overlay">
                        <h2>${firstItem.name}</h2>
                        <p>${firstItem.description}</p>
                        <button style="border-radius: 25px; padding: 12px 30px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                            <a class="linkp" href="${firstItem.url}" target="_blank">View Repository</a>
                        </button>
                    </div>
                `;
            } else {
                const lastItem = {
                    name: items[items.length - 1].getAttribute('data-name'),
                    description: items[items.length - 1].getAttribute('data-description'),
                    url: items[items.length - 1].getAttribute('data-url'),
                    image: items[items.length - 1].getAttribute('data-image')
                };
                for (let i = items.length - 1; i > 0; i--) {
                    items[i].setAttribute('data-name', items[i - 1].getAttribute('data-name'));
                    items[i].setAttribute('data-description', items[i - 1].getAttribute('data-description'));
                    items[i].setAttribute('data-url', items[i - 1].getAttribute('data-url'));
                    items[i].setAttribute('data-image', items[i - 1].getAttribute('data-image'));
                    items[i].innerHTML = items[i - 1].innerHTML;
                }
                items[0].setAttribute('data-name', lastItem.name);
                items[0].setAttribute('data-description', lastItem.description);
                items[0].setAttribute('data-url', lastItem.url);
                items[0].setAttribute('data-image', lastItem.image);
                items[0].innerHTML = `
                    <img src="${lastItem.image}" alt="${lastItem.name}">
                    <div class="overlay">
                        <h2>${lastItem.name}</h2>
                        <p>${lastItem.description}</p>
                        <button style="border-radius: 25px; padding: 12px 30px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                            <a class="linkp" href="${lastItem.url}" target="_blank">View Repository</a>
                        </button>
                    </div>
                `;
            }
        }

        // Event listeners for navigation buttons
        nextButton.addEventListener('click', () => {
            swapContent('next');
        });

        prevButton.addEventListener('click', () => {
            swapContent('prev');
        });

        // Load carousel content when the page loads
        document.addEventListener('DOMContentLoaded', async () => {
            await updateCarouselContent();
            updateCarousel();
        });
    </script>
</body>

</html>
